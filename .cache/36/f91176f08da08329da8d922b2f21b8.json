{"id":"ejercicios/prototypal-inheritance.html","dependencies":[{"name":"/home/ddlousxxx/Documentos/platzi-js/cursoprofecionaljsprofe/package.json","includedInParent":true,"mtime":1640139488155}],"generated":{"html":"<html>\n  <head>\n    <title>Herencia Prototipal</title>\n  </head>\n\n  <body>\n    <a href=\"/ejercicios/\">Go back</a>\n    <p><em>Abre la consola</em></p>\n\n    <h1>\n      <code>SomeObject.prototype</code> es un objeto donde definimos el\n      prototipo de las instancias de <code>SomeObject</code>. Es decir, las\n      instancias de <code>SomeObject</code> van a \"heredar\" de\n      <code>SomeObject.prototype</code>.\n      <br>\n      <br>\n      <code>SomeObject.[[Prototype]]</code> es el prototipo de\n      <code>SomeObject</code>. Es decir, <code>SomeObject</code> \"hereda\" de\n      <code>SomeObject.prototype</code>.\n    </h1>\n\n    <script>function Hero(name) {\n  this.name = name;\n}\n\nHero.prototype.saludar = function () {\n  console.log(`Hola, soy ${this.name}.`);\n};\n\nconst zelda = new Hero('Zelda'); // propiedades de la instancia\n\nconsole.log('Name:', zelda.name); // propiedades de la \"clase\"\n\nconsole.log('Saludar:', zelda.saludar); // propiedades heredadas ej: toString\n\nconsole.log('toString:', zelda.toString); // hasOwnProperty (de d√≥nde sale toString o esto?)\n\nconsole.log('zelda.hasOwnProperty(\"saludar\"):', zelda.hasOwnProperty('saludar')); // inspeccionemos el prototipo del zelda\n// inspeccionemos el prototipo del Hero\n// inspeccionemos el prototipo del Object</script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"baf85678172e44e3467b6dd1bfcff59d","cacheData":{"env":{}}}